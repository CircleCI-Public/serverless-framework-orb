version: 2.1
description: |
    Add the Serverless Framework CLI to your serverless deployment pipeline with ease. Easily and automatically test and deploy serverless applications to your favorite cloud provider.
display:
    home_url: https://serverless.com/
    source_url: https://github.com/CircleCI-Public/serverless-framework-orb
commands:
    setup:
        description: |
            Install and authenticate with the Serverless CLI.
        parameters:
            app-name:
                default: ""
                description: Connect to serverless.com dashboard. Provide the name of this app.
                type: string
            org-name:
                default: ""
                description: Connect to serverless.com dashboard. Provide the org name for this app.
                type: string
            provider:
                default: AWS
                enum:
                    - ""
                    - AWS
                    - azure
                    - tencent
                    - google
                    - knative
                    - alibaba
                    - cloudflare
                    - fn
                    - kubeless
                    - openwhisk
                    - spotinist
                type: enum
        steps:
            - run:
                command: |
                    #!/bin/bash
                    echo "export SLS_ORB_PROVIDER_PARAM=$SLS_ORB_PROVIDER_PARAM" >> "$BASH_ENV"
                    ###
                    # Helper functions
                    ###
                    output_Provider_Selected () {
                      echo "................................."
                      echo " $1 Selected."
                      echo "................................."
                      echo
                    }

                    ###
                    # Provider check functions
                    ###
                    AWS_Check () {
                      output_Provider_Selected "AWS"
                      if [[ $(command -v aws --version >/dev/null 2>&1) == 1 ]]; then
                        echo "ERROR: AWS CLI NOT INSTALLED"
                        TipMsg_Install_AWS
                        exit 1
                      fi
                      if [[ -z $AWS_ACCESS_KEY_ID || -z $AWS_SECRET_ACCESS_KEY ]]; then
                        if [[ ! -f ~/.aws/credentials ]]; then
                          echo "ERROR: CREDENTIALS NOT FOUND"
                          TipMsg_Install_AWS
                          exit 1
                        fi
                      fi
                      TipMsg_Install_AWS () {
                        echo "
                        ---
                        Tip: Install the AWS CLI and authenticate prior to running the Serverless setup command.
                        Consider using the AWS CLI orb: https://circleci.com/orbs/registry/orb/circleci/aws-cli#usage-install_aws_cli

                        Import the AWS CLI Orb To Your Config:
                        ---
                          orbs:
                            aws-cli: circleci/aws-cli@x.y
                        ---

                        Run The AWS Setup Command Prior To The Serverless Command:
                        ---
                          steps:
                            - aws-cli/setup
                            - serverless/setup
                        ---
                        "
                      }
                    }
                    azure_Check () {
                      output_Provider_Selected "Azure"
                      if [[ -z $AZURE_SUBSCRIPTION_ID || -z $AZURE_TENANT_ID || -z $AZURE_CLIENT_ID || -z $AZURE_CLIENT_SECRET ]]; then
                        echo "
                        ---
                        ERROR: No Azure credentials provided!

                        We were unable to find a value for one or more of the following required environment variables:
                        ---
                          AZURE_SUBSCRIPTION_ID
                          AZURE_TENANT_ID
                          AZURE_CLIENT_ID
                          AZURE_CLIENT_SECRET
                        ---

                        The Serverless Framework needs access to Azure account credentials so that it can create and manage resources on your behalf.

                        Docs: https://serverless.com/framework/docs/providers/azure/guide/credentials/
                        "
                        exit 1
                      fi
                    }
                    tencent_Check () {
                      output_Provider_Selected "Tencent"
                    }
                    knative_Check () {
                      output_Provider_Selected "Knative"
                    }
                    alibaba_Check () {
                      output_Provider_Selected "Alibaba"
                    }
                    cloudflare_Check () {
                      output_Provider_Selected "Cloudflare"
                    }
                    fn_Check () {
                      output_Provider_Selected "fn"
                    }
                    kubeless_Check () {
                      output_Provider_Selected "Kubeless"
                    }
                    openwhisk_Check () {
                      output_Provider_Selected "OpenWhisk"
                    }
                    spotinist_Check () {
                      output_Provider_Selected "Spotinist"
                    }
                    ###
                    # Call provider based on parameter
                    ###
                    case $SLS_ORB_PROVIDER_PARAM in
                      "AWS")
                        AWS_Check
                        ;;
                      "azure")
                        azure_Check
                        ;;
                      "tencent")
                        tencent_Check
                        ;;
                      "knative")
                        knative_Check
                        ;;
                      "alibaba")
                        alibaba_Check
                        ;;
                      "cloudflare")
                        cloudflare_Check
                        ;;
                      "fn")
                        fn_Check
                        ;;
                      "kubeless")
                        kubeless_Check
                        ;;
                      "openwhisk")
                        openwhisk_Check
                        ;;
                      "spotinist")
                        spotinist_Check
                        ;;
                      *)
                        other_Check
                    esac
                environment:
                    SLS_ORB_PROVIDER_PARAM: << parameters.provider >>
                name: Provider Check
            - run:
                command: |
                    #!/bin/bash
                    curl -o- -L https://slss.io/install | bash
                    echo "export PATH=$HOME/.serverless/bin:$PATH" >> "$BASH_ENV"
                    # shellcheck disable=SC1090
                    source "$BASH_ENV"
                    # Check for Serverless key
                    if [ -z "$SERVERLESS_ACCESS_KEY" ]; then
                      echo "Error: The environment variable SERVERLESS_ACCESS_KEY is empty.
                        Please create your serverless dashboard access key and add it to this project as a project environment vairable
                        or via contexts.
                        https://serverless.com/framework/docs/dashboard/cicd/running-in-your-own-cicd#configure-environment-variables"
                    else
                      if [[ -n "$SERVERLESS_ORB_ORG_NAME" && -n "$SERVERLESS_ORB_APP_NAME" ]]; then
                        # Autoamtically connect to service (or create one) if org name and app name are present.
                        echo y | serverless --org "$SERVERLESS_ORB_ORG_NAME" --app "$SERVERLESS_ORB_APP_NAME"
                      else
                        echo "WARNING: No Org name or App name detected. NOT connected to a service."
                      fi
                    fi
                environment:
                    SERVERLESS_ORB_APP_NAME: << parameters.app-name >>
                    SERVERLESS_ORB_ORG_NAME: << parameters.org-name >>
                name: Install Serverless CLI
executors:
    default:
        description: |
            Highly cached minimal Ubuntu docker designed for CircleCI with Python and Node.js installed.
        docker:
            - image: cimg/python:<<parameters.python-version>>
        parameters:
            python-version:
                default: 3.8-node
                description: |
                    Select your python version or any of the available tags here: https://hub.docker.com/r/cimg/python.
                type: string
examples:
    simple_deploy_aws:
        description: |
            Use the Serverless orb's "setup" command to install the Serverless Framework CLI and authenticate with your account if an API key is provided. This example shows how to construct a custom "deploy" job using the Serverless and AWS CLI orbs to deploy an app to AWS.
        usage:
            version: "2.1"
            orbs:
                aws-cli: circleci/aws-cli@x.y
                serverless-framework: circleci/serverless-framework@x.y
            jobs:
                deploy:
                    executor: serverless-framework/default
                    steps:
                        - checkout
                        - aws-cli/setup
                        - serverless-framework/setup:
                            app-name: serverless-framework-orb
                            org-name: circleci
                        - run:
                            command: serverless deploy -v
                            name: deploy
            workflows:
                deploy:
                    jobs:
                        - deploy
    test_and_deploy_node_aws:
        description: |
            Make use of the Node, AWS CLI, and Serverless Framework orbs to test and deploy your serverless Node.js applications.
        usage:
            version: "2.1"
            orbs:
                aws-cli: circleci/aws-cli@x.y
                node: circleci/node@x.y
                serverless-framework: circleci/serverless-framework@x.y
            jobs:
                deploy:
                    executor: serverless-framework/default
                    steps:
                        - checkout
                        - aws-cli/setup
                        - serverless-framework/setup:
                            app-name: serverless-framework-orb
                            org-name: circleci
                        - run:
                            command: serverless deploy -v
                            name: deploy
            workflows:
                deploy:
                    jobs:
                        - node/test:
                            version: 13.11.0
                        - deploy:
                            requires:
                                - node/test

